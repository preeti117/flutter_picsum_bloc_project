# Flutter Picsum BLoC Project

This repository implements the requested Flutter assignment: a login screen with validation (BLoC), and a home screen that fetches 10 images from Picsum and displays them in a vertical list. Use this project to build an APK and deploy to Github / Google Drive.

---

## File tree

```
flutter_picsum_bloc_project/
├── README.md
├── pubspec.yaml
├── android/  (generated by flutter create)
├── ios/      (generated by flutter create)
└── lib/
    ├── main.dart
    ├── app.dart
    ├── repositories/
    │   └── picsum_repository.dart
    ├── models/
    │   └── picsum_image.dart
    ├── blocs/
    │   ├── login/
    │   │   ├── login_bloc.dart
    │   │   ├── login_event.dart
    │   │   └── login_state.dart
    │   └── images/
    │       ├── images_bloc.dart
    │       ├── images_event.dart
    │       └── images_state.dart
    ├── screens/
    │   ├── login_screen.dart
    │   └── home_screen.dart
    └── widgets/
        └── picsum_tile.dart

```

---

## pubspec.yaml

```yaml
name: flutter_picsum_bloc_project
description: Picsum demo with BLoC and login validation
publish_to: 'none'
version: 1.0.0+1
environment:
  sdk: '>=2.18.0 <3.0.0'

dependencies:
  flutter:
    sdk: flutter
  flutter_bloc: ^8.1.2
  http: ^0.13.5
  equatable: ^2.0.5
  google_fonts: ^5.0.0

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0

flutter:
  uses-material-design: true
```

---

## README.md (short)

```md
# Flutter Picsum BLoC Project

- Login screen with validation using BLoC
- Home screen fetches 10 images from https://picsum.photos/v2/list?limit=10
- Uses flutter_bloc, google_fonts, http

Run:
- flutter pub get
- flutter run
- flutter build apk --release

``` 

---

## lib/main.dart

```dart
import 'package:flutter/material.dart';
import 'app.dart';

void main() {
  runApp(const MyApp());
}
```

---

## lib/app.dart

```dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'repositories/picsum_repository.dart';
import 'screens/login_screen.dart';

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return RepositoryProvider(
      create: (_) => PicsumRepository(),
      child: MaterialApp(
        title: 'Picsum BLoC App',
        theme: ThemeData(
          primarySwatch: Colors.blue,
        ),
        home: const LoginScreen(),
      ),
    );
  }
}
```

---

## lib/repositories/picsum_repository.dart

```dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/picsum_image.dart';

class PicsumRepository {
  final _base = 'https://picsum.photos/v2/list?limit=10';

  Future<List<PicsumImage>> fetchImages() async {
    final uri = Uri.parse(_base);
    final res = await http.get(uri);
    if (res.statusCode == 200) {
      final List data = json.decode(res.body);
      return data.map((e) => PicsumImage.fromJson(e)).toList();
    } else {
      throw Exception('Failed to load images');
    }
  }
}
```

---

## lib/models/picsum_image.dart

```dart
class PicsumImage {
  final String id;
  final String author;
  final int width;
  final int height;
  final String url;
  final String downloadUrl;

  PicsumImage({
    required this.id,
    required this.author,
    required this.width,
    required this.height,
    required this.url,
    required this.downloadUrl,
  });

  factory PicsumImage.fromJson(Map<String, dynamic> json) => PicsumImage(
        id: json['id'].toString(),
        author: json['author'] ?? '',
        width: json['width'] ?? 0,
        height: json['height'] ?? 0,
        url: json['url'] ?? '',
        downloadUrl: json['download_url'] ?? '',
      );
}
```

---

## lib/blocs/login/login_event.dart

```dart
import 'package:equatable/equatable.dart';

abstract class LoginEvent extends Equatable {
  @override
  List<Object> get props => [];
}

class EmailChanged extends LoginEvent {
  final String email;
  EmailChanged(this.email);
  @override
  List<Object> get props => [email];
}

class PasswordChanged extends LoginEvent {
  final String password;
  PasswordChanged(this.password);
  @override
  List<Object> get props => [password];
}

class LoginSubmitted extends LoginEvent {}
```

---

## lib/blocs/login/login_state.dart

```dart
import 'package:equatable/equatable.dart';

class LoginState extends Equatable {
  final String email;
  final String password;
  final bool isEmailValid;
  final bool isPasswordValid;
  final bool isSubmitting;
  final bool isSuccess;
  final String? error;

  const LoginState({
    this.email = '',
    this.password = '',
    this.isEmailValid = false,
    this.isPasswordValid = false,
    this.isSubmitting = false,
    this.isSuccess = false,
    this.error,
  });

  LoginState copyWith({
    String? email,
    String? password,
    bool? isEmailValid,
    bool? isPasswordValid,
    bool? isSubmitting,
    bool? isSuccess,
    String? error,
  }) {
    return LoginState(
      email: email ?? this.email,
      password: password ?? this.password,
      isEmailValid: isEmailValid ?? this.isEmailValid,
      isPasswordValid: isPasswordValid ?? this.isPasswordValid,
      isSubmitting: isSubmitting ?? this.isSubmitting,
      isSuccess: isSuccess ?? this.isSuccess,
      error: error,
    );
  }

  @override
  List<Object?> get props => [email, password, isEmailValid, isPasswordValid, isSubmitting, isSuccess, error];
}
```

---

## lib/blocs/login/login_bloc.dart

```dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'login_event.dart';
import 'login_state.dart';

class LoginBloc extends Bloc<LoginEvent, LoginState> {
  LoginBloc() : super(const LoginState()) {
    on<EmailChanged>(_onEmailChanged);
    on<PasswordChanged>(_onPasswordChanged);
    on<LoginSubmitted>(_onSubmitted);
  }

  static final RegExp _emailReg = RegExp(r"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}\$");
  static final RegExp _passwordReg = RegExp(r'^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9]).{8,}\$');

  void _onEmailChanged(EmailChanged event, Emitter<LoginState> emit) {
    final valid = _emailReg.hasMatch(event.email);
    emit(state.copyWith(email: event.email, isEmailValid: valid));
  }

  void _onPasswordChanged(PasswordChanged event, Emitter<LoginState> emit) {
    final valid = _passwordReg.hasMatch(event.password);
    emit(state.copyWith(password: event.password, isPasswordValid: valid));
  }

  Future<void> _onSubmitted(LoginSubmitted event, Emitter<LoginState> emit) async {
    if (!state.isEmailValid || !state.isPasswordValid) {
      emit(state.copyWith(error: 'Please correct the fields'));
      return;
    }
    emit(state.copyWith(isSubmitting: true, error: null));

    // Simulate authentication delay. In real app call auth api
    await Future.delayed(const Duration(seconds: 1));

    // Accept any valid creds
    emit(state.copyWith(isSubmitting: false, isSuccess: true));
  }
}
```

---

## lib/blocs/images/images_event.dart

```dart
import 'package:equatable/equatable.dart';

abstract class ImagesEvent extends Equatable {
  @override
  List<Object> get props => [];
}

class ImagesRequested extends ImagesEvent {}
```

---

## lib/blocs/images/images_state.dart

```dart
import 'package:equatable/equatable.dart';
import '../../models/picsum_image.dart';

abstract class ImagesState extends Equatable {
  @override
  List<Object?> get props => [];
}

class ImagesInitial extends ImagesState {}
class ImagesLoadInProgress extends ImagesState {}
class ImagesLoadSuccess extends ImagesState {
  final List<PicsumImage> images;
  ImagesLoadSuccess(this.images);
  @override
  List<Object?> get props => [images];
}
class ImagesLoadFailure extends ImagesState {
  final String error;
  ImagesLoadFailure(this.error);
  @override
  List<Object?> get props => [error];
}
```

---

## lib/blocs/images/images_bloc.dart

```dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'images_event.dart';
import 'images_state.dart';
import '../../repositories/picsum_repository.dart';

class ImagesBloc extends Bloc<ImagesEvent, ImagesState> {
  final PicsumRepository repo;
  ImagesBloc(this.repo) : super(ImagesInitial()) {
    on<ImagesRequested>(_onRequested);
  }

  Future<void> _onRequested(ImagesRequested event, Emitter<ImagesState> emit) async {
    emit(ImagesLoadInProgress());
    try {
      final images = await repo.fetchImages();
      emit(ImagesLoadSuccess(images));
    } catch (e) {
      emit(ImagesLoadFailure(e.toString()));
    }
  }
}
```

---

## lib/screens/login_screen.dart

```dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_fonts/google_fonts.dart';
import '../blocs/login/login_bloc.dart';
import '../blocs/login/login_event.dart';
import '../blocs/login/login_state.dart';
import 'home_screen.dart';

class LoginScreen extends StatelessWidget {
  const LoginScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => LoginBloc(),
      child: Scaffold(
        appBar: AppBar(title: const Text('Login')),
        body: const Padding(
          padding: EdgeInsets.all(16.0),
          child: _LoginForm(),
        ),
      ),
    );
  }
}

class _LoginForm extends StatefulWidget {
  const _LoginForm();
  @override
  State<_LoginForm> createState() => _LoginFormState();
}

class _LoginFormState extends State<_LoginForm> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<LoginBloc, LoginState>(
      listener: (context, state) {
        if (state.isSuccess) {
          Navigator.of(context).pushReplacement(
            MaterialPageRoute(builder: (_) => const HomeScreen()),
          );
        }
        if (state.error != null) {
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(state.error!)));
        }
      },
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          TextField(
            controller: _emailController,
            keyboardType: TextInputType.emailAddress,
            decoration: InputDecoration(labelText: 'Email'),
            onChanged: (v) => context.read<LoginBloc>().add(EmailChanged(v)),
          ),
          const SizedBox(height: 12),
          TextField(
            controller: _passwordController,
            obscureText: true,
            decoration: InputDecoration(labelText: 'Password'),
            onChanged: (v) => context.read<LoginBloc>().add(PasswordChanged(v)),
          ),
          const SizedBox(height: 20),
          BlocBuilder<LoginBloc, LoginState>(builder: (context, state) {
            final enabled = state.isEmailValid && state.isPasswordValid && !state.isSubmitting;
            return ElevatedButton(
              onPressed: enabled
                  ? () => context.read<LoginBloc>().add(LoginSubmitted())
                  : null,
              child: state.isSubmitting
                  ? const SizedBox(height: 16, width: 16, child: CircularProgressIndicator(strokeWidth: 2))
                  : Text('Submit', style: GoogleFonts.montserrat()),
            );
          }),
          const SizedBox(height: 12),
          Text(
            'Password must be at least 8 characters, contain upper & lower case, a digit and a symbol.',
            style: GoogleFonts.montserrat(fontSize: 12),
          ),
        ],
      ),
    );
  }
}
```

---

## lib/screens/home_screen.dart

```dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_fonts/google_fonts.dart';
import '../repositories/picsum_repository.dart';
import '../blocs/images/images_bloc.dart';
import '../blocs/images/images_event.dart';
import '../blocs/images/images_state.dart';
import '../widgets/picsum_tile.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final repo = RepositoryProvider.of<PicsumRepository>(context);
    return BlocProvider(
      create: (_) => ImagesBloc(repo)..add(ImagesRequested()),
      child: Scaffold(
        appBar: AppBar(title: Text('Picsum Images', style: GoogleFonts.montserrat(fontWeight: FontWeight.w600))),
        body: Padding(
          padding: const EdgeInsets.symmetric(vertical: 8.0),
          child: BlocBuilder<ImagesBloc, ImagesState>(builder: (context, state) {
            if (state is ImagesLoadInProgress) {
              return const Center(child: CircularProgressIndicator());
            } else if (state is ImagesLoadSuccess) {
              return ListView.separated(
                itemCount: state.images.length,
                separatorBuilder: (_, __) => const SizedBox(height: 12),
                itemBuilder: (context, index) {
                  final img = state.images[index];
                  return PicsumTile(image: img);
                },
                padding: const EdgeInsets.symmetric(horizontal: 12),
              );
            } else if (state is ImagesLoadFailure) {
              return Center(child: Text('Error: ${state.error}'));
            }
            return const SizedBox();
          }),
        ),
      ),
    );
  }
}
```

---

## lib/widgets/picsum_tile.dart

```dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../models/picsum_image.dart';

class PicsumTile extends StatelessWidget {
  final PicsumImage image;
  const PicsumTile({super.key, required this.image});

  @override
  Widget build(BuildContext context) {
    final aspect = image.width > 0 ? image.width / (image.height == 0 ? 1 : image.height) : 1.0;
    // We'll use a LayoutBuilder to set width and compute height
    return LayoutBuilder(builder: (context, constraints) {
      final width = constraints.maxWidth;
      final height = width / (aspect == 0 ? 1 : aspect);
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(8),
            child: Image.network(
              image.downloadUrl,
              width: width,
              height: height,
              fit: BoxFit.cover,
              loadingBuilder: (context, child, evt) {
                if (evt == null) return child;
                return SizedBox(height: height, child: Center(child: CircularProgressIndicator()));
              },
            ),
          ),
          const SizedBox(height: 8),
          Text(image.author, style: GoogleFonts.montserrat(fontWeight: FontWeight.w600, color: Colors.black)),
          const SizedBox(height: 4),
          Text('Image ${image.id} • ${image.width}x${image.height}',
              style: GoogleFonts.montserrat(color: Colors.grey[700]),
              maxLines: 2,
              overflow: TextOverflow.ellipsis),
        ],
      );
    });
  }
}
```

---

## Notes & How to build

1. Save the files in a Flutter project (or copy this tree into a new project created with `flutter create`).
2. Run `flutter pub get`.
3. Run on device/emulator: `flutter run`.
4. To build release APK: `flutter build apk --release`.
5. Upload the generated `build/app/outputs/flutter-apk/app-release.apk` to Google Drive and share the link publicly.
6. Initialize a git repo and push to GitHub (include README & LICENSE as you wish).

---

If you'd like, I can also:
- generate a ready-to-download ZIP of the project files
- provide step-by-step GitHub repo setup commands and example `.gitignore`
- create a short script for building the APK

Tell me which additional artifacts you'd like.
